version: 2.1

setup: true

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  backstage-entity-validator: roadiehq/backstage-entity-validator@0.4.2
  continuation: circleci/continuation@0.3.1
  pocket: pocket/circleci-orbs@1.2.8

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  build:
    docker:
      - image: cimg/node:16.20
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace
      # Add user to npmrc
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      #Validate backstage entity.
      #Eventually this should be its own job, but they need to fix it, or we add it to our circleci orbs
      - backstage-entity-validator/validate:
          path: catalog-info.yaml
      - run:
          name: Run build
          command: |
            export NODE_ENV=production
            npm run build
      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r ./node_modules package.json Dockerfile ./dist /tmp/workspace/app_prod
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_integrations:
    parameters:
      snowplow_image:
        default: "pocket/snowplow-micro:prod"
        type: string
    description: Run integration tests against prod snowplow image
    docker:
      - image: cimg/node:16.20
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          NODE_ENV: test
          AWS_XRAY_LOG_LEVEL: silent
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
      - image: << parameters.snowplow_image >>
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: run setup.sh
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --db
      - run:
          name: run tests
          command: |
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            npm run test-integrations  -- --ci --watchAll=false --forceExit

  test_specs:
    description: Run spec tests
    docker:
      - image: cimg/node:16.20
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          NODE_ENV: test
          AWS_XRAY_LOG_LEVEL: silent
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    steps:
      - checkout
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: install node modules
          command: npm ci
      - run:
          name: run tests
          command: npm run test

workflows:
  api:
    jobs:
      - test_specs:
          <<: *not_main
          context: pocket
          name: test_specs

      - test_integrations_prod:
          <<: *not_main
          context: pocket
          snowplow_image: pocket/snowplow-micro:prod
          name: test_integrations

      - test_integrations_dev:
          <<: *not_main
          context: pocket
          snowplow_image: pocket/snowplow-micro:latest
          name: test_integrations

      - build:
          context: pocket

      # Try building the ECS docker image on each branch
      - pocket/docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          repo-name: sharedsnowplowconsumer-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - pocket/docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: SharedSnowplowConsumer-Dev
          codebuild-project-branch: dev
          repo-name: sharedsnowplowconsumer-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: SharedSnowplowConsumer-Dev-CodePipeline
          codebuild-project-name: SharedSnowplowConsumer-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - pocket/docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codebuild-project-name: SharedSnowplowConsumer-Prod
          codebuild-project-branch: main
          repo-name: sharedsnowplowconsumer-prod-app
          ecr-url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: SharedSnowplowConsumer-Prod-CodePipeline
          codebuild-project-name: SharedSnowplowConsumer-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: SharedSnowplowConsumer

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: SharedSnowplowConsumer

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/shared-snowplow-consumer
          sentry_project_name: shared-snowplow-consumer
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/shared-snowplow-consumer
          sentry_project_name: shared-snowplow-consumer
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
