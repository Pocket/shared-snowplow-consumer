version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@2.0.0
  aws-cli: circleci/aws-cli@1.2.1
  pocket: pocket/circleci-orbs@1.2.4

# Workflow shortcuts
# You can remove unnecessary shortcuts as applicable
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

commands:
  setup_node:
    description: Install npm packages
    parameters:
      dir:
        type: string
        description: The source directory to install node packages
        default: .
      description:
        type: string
        description: Description of the node module installation
        default: Install node modules
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            # If this gets our of sync, you can increment the version (vX).  Just be
            # sure to match that version when saving the cache as well.
            - node-v2-<< parameters.dir >>-{{ checksum "package-lock.json" }}
      - run:
          name: Authenticate with GitHub package registry
          command: echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" > ~/.npmrc
      - run:
          name: << parameters.description >>
          command: cd << parameters.dir >> && npm ci
      # Save the cache to avoid extraneous downloads
      - save_cache:
          key: node-v2-<< parameters.dir >>-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
            - .npm

  install_dependencies:
    description: Install all dependencies for snowplow shared consumer
    steps:
      - setup_node:
          description: Install dev dependencies
      - setup_node:
          description: Install dependencies for the snowplow_shared_consumer
          dir: snowplow_shared_consumer

jobs:
  run_code_build:
    description: run codebuild to apply infrastructure
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        description: The env capital name
        type: string
      codebuild_project_name:
        type: string
        description: The CodeBuild project name
        default: ""
      codebuild_project_branch:
        type: string
        description: The git branch to build
        default: ""
      deploy:
        type: boolean
        default: false
    docker:
      - image: circleci/node:14
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - aws-cli/setup:
          aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
          aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
          aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
      - run:
          name: Setup CodeBuild environment variables
          command: |
            { \
            echo 'export CODEBUILD_PROJECT_NAME="<< parameters.codebuild_project_name >>"'; \
            echo 'export CODEBUILD_PROJECT_BRANCH="<< parameters.codebuild_project_branch >>"'; \
            } >> "$BASH_ENV"
      - run:
          name: Run CodeBuild
          command: |
            echo -e "Starting CodeBuild for ${CODEBUILD_PROJECT_NAME}.\n"
            BUILD_ID=$(aws codebuild start-build --project-name "$CODEBUILD_PROJECT_NAME" --environment-variables-override name=GIT_BRANCH,value="$CODEBUILD_PROJECT_BRANCH" --source-version "$CODEBUILD_PROJECT_BRANCH" --query 'build.id' --output text)
            BUILD_STATUS="IN_PROGRESS"
            # Wait for the CodeBuild to complete.
            while [ "$BUILD_STATUS" == "IN_PROGRESS" ]; do
              sleep 10
              echo "Checking build status"
              BUILD_STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].buildStatus' --output text)
              if [ "$BUILD_STATUS" == "IN_PROGRESS" ]; then
                echo -e "Build is ${BUILD_STATUS}, waiting for build to complete...waiting for 10 seconds before next check...\n"
              fi
            done
            if [ "$BUILD_STATUS" != "SUCCEEDED" ]; then
              echo "CodeBuild failed to succeed with status ${BUILD_STATUS}"
              exit 1
            else
              echo -e "CodeBuild succeeded\n"
            fi
      - store_artifacts:
          path: /tmp/build.zip

  build_and_deploy_lambda:
    description: build and deploy the app code to the lambda
    parameters:
      dir:
        type: string
        description: The lambda source directory
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        description: The env capital name
        type: string
      lambda_lower_name:
        type: string
        description: The lower case lambda name
      lambda_name:
        description: The lambda capital name
        type: string
      deploy:
        description: deploys on true
        type: boolean
        default: false
    docker:
      - image: circleci/node:14
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - install_dependencies
      - run:
          name: Package Lambda
          command: |
            npm run build
            cp -r << parameters.dir >>/node_modules/ ./dist/<< parameters.dir >>/node_modules/
            cd ./dist/<< parameters.dir >>
            zip -r9 "/tmp/$CIRCLE_SHA1.zip" *
            mkdir -p /tmp
            cp "/tmp/$CIRCLE_SHA1.zip" /tmp/build.zip
      - aws-cli/setup:
          aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
          aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
          aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
      - when:
          condition: << parameters.deploy >>
          steps:
            - run:
                name: Upload Package
                command: aws s3 cp "/tmp/$CIRCLE_SHA1.zip" s3://pocket-snowplowsharedconsumer-<< parameters.env_lower_name >>-<< parameters.lambda_lower_name >>/
            - pocket/deploy_lambda:
                s3-bucket: pocket-snowplowsharedconsumer-<< parameters.env_lower_name >>-<< parameters.lambda_lower_name >>
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
                codedeploy-application-name: SnowplowSharedConsumer-<< parameters.env_capital_name >>-<< parameters.lambda_name >>-Lambda
                codedeploy-deployment-group-name: SnowplowSharedConsumer-<< parameters.env_capital_name >>-<< parameters.lambda_name >>-Lambda
                function-name: SnowplowSharedConsumer-<< parameters.env_capital_name >>-<< parameters.lambda_name >>-Function
      - store_artifacts:
          path: /tmp/build.zip

  test_specs:
    description: Run spec tests
    docker:
      - image: circleci/node:16
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          NODE_ENV: test
          AWS_XRAY_LOG_LEVEL: silent
          AWS_XRAY_CONTEXT_MISSING: LOG_ERROR
    steps:
      - install_dependencies
      - run:
          name: run tests
          command: npm run test-spec

workflows:
  all:
    jobs:
      - test_specs:
          <<: *not_main
          context: pocket

      - run_code_build:
          <<: *only_dev
          context: pocket
          name: run_dev_code_build
          codebuild_project_name: SnowplowSharedConsumer-Dev
          codebuild_project_branch: dev
          env_lower_name: dev
          env_capital_name: Dev

      - run_code_build:
          <<: *only_main
          context: pocket
          name: run_prod_code_build
          codebuild_project_name: SnowplowSharedConsumer-Prod
          codebuild_project_branch: main
          env_lower_name: prod
          env_capital_name: Prod

      # SQS lambda deployment
      # Build the sqs lambda on each branch
      - build_and_deploy_lambda:
          <<: *not_dev_main
          context: pocket
          name: build_snowplow_shared_consumer
          env_lower_name: prod
          env_capital_name: Prod
          lambda_lower_name: snowplow-shared-consumer
          lambda_name: Snowplow-Shared-Consumer


      # Build & Deploy SQS lambda on dev branch
      - build_and_deploy_lambda:
          <<: *only_dev
          context: pocket
          name: deploy_snowplow_shared_consumer_dev
          env_lower_name: dev
          env_capital_name: Dev
          lambda_lower_name: shared-event-consumer
          lambda_name: SharedEventConsumer
          deploy: true
          requires:
            - run_dev_code_build

      # Build & Deploy Sqs lambda in main branch
      - build_and_deploy_lambda:
          <<: *only_main
          context: pocket
          name: deploy_snowplow_shared_consumer_prod
          env_lower_name: prod
          env_capital_name: Prod
          lambda_lower_name: shared-event-consumer
          lambda_name: SharedEventConsumer
          deploy: true
          requires:
            - run_prod_code_build

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/${CONSTRUCT_NAME}
          sentry_project_name: ${CONSTRUCT_NAME}
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_snowplow_shared_consumer_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/${CONSTRUCT_NAME}
          sentry_project_name: ${CONSTRUCT_NAME}
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_snowplow_shared_consumer_dev
