version: 2.1

setup: true

parameters:
  build-on-change:
    description: Check for file changes to lambdas before build/deploy. Setting this to false will force build.
    type: boolean
    default: true

orbs:
  pocket: pocket/circleci-orbs@1.2.8
  aws-cli: circleci/aws-cli@1.2.1
  backstage-entity-validator: roadiehq/backstage-entity-validator@0.4.2
  path-filtering: circleci/path-filtering@0.1.3
  continuation: circleci/continuation@0.3.1

# Workflow shortcuts
# You can remove unnecessary shortcuts as applicable
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

only_dev_main: &only_dev_main
  filters:
    branches:
      only:
        - dev
        - main

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

jobs:
  run_code_build:
    description: run codebuild to apply infrastructure
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        description: The env capital name
        type: string
      codebuild_project_name:
        type: string
        description: The CodeBuild project name
        default: ""
      codebuild_project_branch:
        type: string
        description: The git branch to build
        default: ""
      deploy:
        type: boolean
        default: false
    docker:
      - image: cimg/node:16.16@sha256:a573c7e7cd841617c51f0835857dad5800d0f0dd492a82c2b336500604eb0c72
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - aws-cli/setup:
          aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
          aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
          aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
      - run:
          name: Setup CodeBuild environment variables
          command: |
            { \
            echo 'export CODEBUILD_PROJECT_NAME="<< parameters.codebuild_project_name >>"'; \
            echo 'export CODEBUILD_PROJECT_BRANCH="<< parameters.codebuild_project_branch >>"'; \
            } >> "$BASH_ENV"
      - run:
          name: Run CodeBuild
          command: |
            echo -e "Starting CodeBuild for ${CODEBUILD_PROJECT_NAME}.\n"
            BUILD_ID=$(aws codebuild start-build --project-name "$CODEBUILD_PROJECT_NAME" --environment-variables-override name=GIT_BRANCH,value="$CODEBUILD_PROJECT_BRANCH" --source-version "$CODEBUILD_PROJECT_BRANCH" --query 'build.id' --output text)
            BUILD_STATUS="IN_PROGRESS"
            # Wait for the CodeBuild to complete.
            while [ "$BUILD_STATUS" == "IN_PROGRESS" ]; do
              sleep 10
              echo "Checking build status"
              BUILD_STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].buildStatus' --output text)
              if [ "$BUILD_STATUS" == "IN_PROGRESS" ]; then
                echo -e "Build is ${BUILD_STATUS}, waiting for build to complete...waiting for 10 seconds before next check...\n"
              fi
            done
            if [ "$BUILD_STATUS" != "SUCCEEDED" ]; then
              echo "CodeBuild failed to succeed with status ${BUILD_STATUS}"
              exit 1
            else
              echo -e "CodeBuild succeeded\n"
            fi
      - store_artifacts:
          path: /tmp/build.zip

workflows:
  force-build:
    when:
      not: << pipeline.parameters.build-on-change >>
    jobs:
      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      - run_code_build:
          <<: *only_dev
          context: pocket
          name: run_dev_code_build
          codebuild_project_name: SharedSnowplowConsumer-Dev
          codebuild_project_branch: dev
          env_lower_name: dev
          env_capital_name: Dev

      - run_code_build:
          <<: *only_main
          context: pocket
          name: run_prod_code_build
          codebuild_project_name: SharedSnowplowConsumer-Prod
          codebuild_project_branch: main
          env_lower_name: prod
          env_capital_name: Prod

      - continuation/continue:
          configuration_path: .circleci/continue-config.yml
          parameters: '{"run-build-deploy-events-lambda-job":true}'

  base:
    when: << pipeline.parameters.build-on-change >>
    jobs:
      #Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ${SERVICE_NAME}
      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ${SERVICE_NAME}

      - run_code_build:
          <<: *only_dev
          context: pocket
          name: run_dev_code_build
          codebuild_project_name: SharedSnowplowConsumer-Dev
          codebuild_project_branch: dev
          env_lower_name: dev
          env_capital_name: Dev

      - run_code_build:
          <<: *only_main
          context: pocket
          name: run_prod_code_build
          codebuild_project_name: SharedSnowplowConsumer-Prod
          codebuild_project_branch: main
          env_lower_name: prod
          env_capital_name: Prod

      - path-filtering/filter:
          name: check-updated-files
          # 3-column, whitespace-delimited mapping. One mapping per
          # line:
          # <regex path-to-test> <parameter-to-set> <value-of-pipeline-parameter>
          # If build-on-change is false, the 'force-build' will trigger so the param is set to false to avoid double-build
          mapping: |
            src/lambda/events/.* run-build-deploy-events-lambda-job << pipeline.parameters.build-on-change >>
          base-revision: main
          # this is the path of the configuration we should trigger once
          # path filtering and pipeline parameter value updates are
          # complete.
          config-path: .circleci/continue-config.yml
